Header	Description	pre_conditions	post_conditions	difficulty	hasForAll	hasExists	hasArrays	hasEquality	hasLogicOperator	hasRelationalComparer	hasArithmetic	hasImplication
public static void multiply(int a, int retval)	Multiply a strictly positive integer a by 2, resulting in retval.	a >= 1	retval == (a * 2)	1	0	0	0	1	0	1	1	0
public static void swap(int[] a, int[] b, int i, int j, int k)	Given an array a and integers i and j, return array b, which is a with the entries on indices i and j swapped.	a != null && i >= 0 && j >= 0 && i < a.length && j < a.length	(b != null) && (a.length == b.length) && forall(a, k -> (k == i) || (k == j) || (a[k] == b[k])) && (a[i] == b[j]) && (a[j] == b[i])	5	1	0	1	1	1	1	0	0
public static void getMax(int[] a, int b, int i) 	Given a non-empty array a of integers, return its maximum value b.	a != null && (a.length > 0)	exists(a, i -> a[i] == b) && forall(a, i -> a[i] <= b)	4	1	1	1	1	1	1	0	0
public static void sort(int[] a, int[] retval, int i, int j)	Sort an array of distinct elements a, resulting in retval.	(a != null) && forall(a, i -> forall(a, j -> (i == j) || (a[i] != a[j])))	(retval != null) && forallr(retval, 1, retval.length, i -> retval[i] > retval[i - 1]) && forall(retval, i -> exists(a, j -> retval[i] == a[j])) && (retval.length == a.length)	5	1	0	1	0	0	1	0	0
public static void sqrt(int a, float f)	Given a non-negative integer a, return the square root of a as a float f up to an error of at most 0.01.	a >= 0	(((f + 0.01) * (f + 0.01) >= a) && ((f - 0.01) * (f - 0.01) <= a)) || ((a == 0) && (f <= 0.01) && (f + 0.01 >= 0))	4	0	0	0	1	1	1	1	0
public static void foo(int a, int b)	Given a strictly negative integer a, return b, which equals a.	a < 0	a == b	1	0	0	0	1	0	1	0	0
public static void getMin(int[] a, int b, int i) 	Given an array of integers a, return its minimum value b.	a != null && (a.length > 0)	exists(a, i -> a[i] == b) && forall(a, i -> a[i] >= b)	4	1	1	1	1	1	1	0	0
public static void modulo(int a, int b, int retval)	Given integer a and strictly posiive integer b, return a modulo b, resulting in retval.	b > 0	retval == (a % b)	2	0	0	0	1	0	1	1	0
public static void implication(boolean a, int b, int c, int retval)	Given boolean a and integers b and c, return integer retval, which is b if a is true and c otherwise.	(true)	imp(a, retval == b) && imp(!a, retval == c)	2	0	0	0	1	1	0	0	1
public static void isSum(int x, int a1, int a2, int a3, boolean retval)	Checks whether x is equal to the sum of a1, a2, and a3. Returns the result in retval.	(true)	retval == (x == (a1 + a2 + a3))	1	0	0	0	1	0	0	1	0
public static void reverse(int[] a, int[] r, int i) 	Given an array a, return r, which is a reversed.	a != null	b != null && (a.length == b.length) && forall(a, i -> a[i] == b[b.length - i - 1])	4	1	0	1	1	1	0	1	0
public static void hasOnlyPositive(int[] a, boolean retval, int i) 	Given an array of integers a, return the boolean retval, which denotes whether a has only strictly positive elements.	a != null	retval == forall(a, i -> a[i] > 0)	4	1	0	1	1	0	1	0	0
public static void complement(int[] a, int[] b, int[] c, int i, int j)	Given arrays a and b, return array c containing all elements in b not in a.	a != null && b != null	c != null && forall(b, i -> exists(a, j -> b[i] == a[j]) || exists(c, j -> b[i] == c[j])) && forall(c, i -> !exists(a, j -> c[i] == a[j]))	5	1	1	1	1	1	0	0	0
public static void sign(int a, int retval)	Given integer a, return retval, which is 1 if a is positive, -1 if a is negative and 0 if a equals 0.	(true)	imp(a > 0, retval == 1) && imp(a < 0, retval == -1) && imp(a == 0, retval == 0)	2	0	0	0	1	1	1	0	1
public static void union(int[] a, int[] b, int[] c, int i, int j)	Given arrays a and b, return array c containing all elements in a or in b.	a != null && b != null	c != null && forall(a, i -> exists(c, j -> a[i] == c[j])) && forall(b, i -> exists(c, j -> b[i] == c[j])) && forall(c, i -> exists(a, j -> c[i] == a[j]) || exists(b, j -> c[i] == b[j]))	5	1	1	1	1	1	0	0	0
public static void removeDuplicates(int[] a, int[] b, int i, int j)	Given an array a, return array b which is array a without duplicates.	a != null	b != null && forall(a, i -> exists(b, j -> a[i] == b[j])) && forall(b, i -> exists(a, j -> b[i] == a[j])) && forall(b, i -> !exists(b, j -> i != j && b[i] == b[j]))	5	1	1	1	1	1	0	0	0
public static void abs(int a, int b)	Given an integer a, store the absolute value of a in b.	(true)	b >= 0 && (b == a || b + a == 0)	2	0	0	0	1	1	1	0	0
public static void interval(float a, float b, float c)	Given floats a and b with a strictly less than b, return a float c strictly between a and b.	a < b	a < c && c < b	2	0	0	0	0	1	1	0	0
public static void allEqual(int[] a, int b, int i)	Check whether all integers in the array a are equal to b.	a != null	forall(a, i -> a[i] == b)	3	1	0	1	1	0	0	0	0
public static void commonMultiple(int[] a, int b, int i)	Given an array of integers a, return a common multiple b of the elements of a.	a != null	forall(a, i -> (b % a[i]) == 0)	3	1	0	1	1	0	0	1	0
public static void commonDivisor(int[] a, int b, int i)	Given an array of integers a, return a common divisor b of the elements of a.	a != null	forall(a, i -> (a[i] % b) == 0)	3	1	0	1	1	0	0	1	0
public static void distinctElements(int[] a, int b, int c, int i, int j)	Given an array a, return two different elements b and c from a.	a != null && exists(a, i -> exists(a, j -> a[i] != a[j]))	b != c && exists(a, i -> a[i] == b) && exists(a, i -> a[i] == c)	4	0	1	1	1	1	0	0	0
public static void consecutiveArray(int a, int[] b, int i)	Given a non-negative integer a, return the array b=[0,1,...,a].	a >= 0	b != null && forall(b, i -> b[i] == i) && (b.length == (a + 1))	4	1	0	1	1	1	1	1	0
public static void latticePoint(int a, int b, int y)	Given strictly positive integers a and b, return an integer y such that there exists an integer x such that y=ax+b.	a > 0 && b > 0	((y - b) % a) == 0	4	0	0	0	1	1	1	1	0
public static void firstEven(int[] a, int i, int j)	Given an array a, return the index i of the first even element.	a != null && exists(a, j -> (a[j] % 2) == 0)	i >= 0 && i < a.length && (a[i] % 2) == 0 && forallr(a, 0, i - 1, j -> (a[j] % 2) == 1)	4	1	1	1	1	1	0	1	0
public static void concatenate(int[] a, int[] b, int i)	Given an array a, return array b that is a concatenated to itself.	a != null	b != null && (b.length == (a.length * 2)) && forall(a, i -> a[i] == b[i] && a[i] == b[i + a.length])	3	1	0	1	1	1	0	1	0
public static void lastIndex(int[] a, int i)	Given a non-empty array a, return the index i of the last element.	a != null && (a.length > 0)	i == (a.length - 1)	2	0	0	1	1	1	1	1	0
public static void unique(int[] a, int b, boolean retval, int i, int j)	Check if there is a single instance of b in integer array a, resulting in retval.	a != null	retval == (exists(a, i -> (a[i] == b) && forall(a, j -> imp( (i != j), (a[i] != a[j])))))	4	1	1	1	1	1	0	0	1
public static void consecutiveTrue(boolean[] a, boolean retval, int i)	Given an array of booleans a, determine if there are two consecutive true values, resulting in retval.	a != null	retval == exists(a, i -> ((i + 1) < a.length) && a[i] && a[i + 1])	4	0	1	1	1	1	1	1	0
public static void xor1(boolean a, boolean b, boolean c)	Given booleans a and b, return c = a XOR b.	(true)	c == (a != b)	4	0	0	0	1	0	0	0	0
public static void xor2(boolean a, boolean b, boolean c)	Given booleans a and b, return c = a XOR b.	(true)	c == ((a || b) && !(a && b))	2	0	0	0	1	1	0	0	0
public static void isPythagoreanTriple(int a, int b, int c, boolean retval)	Given 3 strictly positive integers a, b and c, check whether a^2 + b^2 = c^2, resulting in retval.	a > 0 && b > 0 && c > 0	retval == ((c * c) == ((b * b) + (a * a)))	2	0	0	0	1	0	0	1	0
public static void closest(float a, float b, float c, float x)	Given floats a, b and c with a strictly less than b and c strictly between a and b, return x=a if x is strictly closer to c than b, but return x=b otherwise.	a < c && c < b	((x == a) && ((c - a) < (b - c))) || ((x == b) && ((b - c) <= (c - a)))	3	0	0	0	1	1	1	1	0
public static void count(boolean a, boolean b, int retval)	Given two booleans a and b, count how many are true, resulting in the integer retval.	(true)	(retval == 0 && !a && !b) || (retval == 1 && (a != b)) || (retval == 2 && a && b)	3	0	0	0	1	1	0	0	0
public static void collatz(int n, int m)	Given a strictly positive integer n, return m=3n+1 if n is odd, but return m=n/2 if n is even.	n > 0	(n == (2 * m)) || ((n % 2 == 1) && (m == (3 * n + 1)))	2	0	0	0	1	1	0	1	0
public static void isEmpty(int[] a, boolean retval)	Given an array a, determine whether a is empty, resulting in retval.	a != null	retval == (a.length == 0)	1	0	0	1	1	0	0	0	0
public static void bump(int f, int x)	Given an integer f, return x, which is one more than f.	(true)	x == (f + 1)	1	0	0	0	1	0	0	1	0
public static void divide(int a, int b, int x)	Given integers a and b where a is a multiple of b, return x=a/b.	b != 0 && ((a % b) == 0)	(x * b) == a	2	0	0	0	1	1	0	1	0
public static void integerAverage(int a, int b, int c)	Given integers a and b, return c between 0 and 2 inclusive, such that the average of a, b and c is an integer.	(true)	c >= 0 && c < 3 && ((a + b + c) % 3) == 0	3	0	0	0	1	1	1	1	0
public static void addHours(int a, int b, int c)	Increase the hours a on a digital clock by non-negative hours b, resulting in c	a >= 0 && a < 24 && b >= 0	c == ((a + b) % 24)	2	0	0	0	1	1	1	1	0
public static void evenSum(int a, int b, int c, boolean retval)	Given integers a, b and c, determine whether you can choose two of the numbers such that their sum is even, resulting in retval.	(true)	retval == ((((a + b) % 2) == 0) || (((a + c) % 2) == 0) || (((b + c) % 2) == 0))	2	0	0	0	1	1	0	1	0
public static void findDifference(int x, int y, int[] a, int b, int i)	Find two integers x and y in array a, such that the difference between x and y is at least b.	a != null && a.length >= 2	(( (x-y) >= b) || ( (y-x) >= b )) && exists(a, i -> (a[i] == x)) && exists(a, i -> (a[i] == y))	3	0	1	1	1	1	1	1	0
public static void isRightTriangle(int a, int b, int c, boolean retval)	Given non-negative integers a, b and c, where c is the long side, determine whether these can make a right triangle, resulting in retval	a >= 0 && b >= 0 && c >= 0	retval == ( c * c >= (a * a) + (b * b))	2	0	0	0	1	1	1	1	0
public static void floatDivision(float a, float b, float c)	Given two floats a and b, return c=a/b with an error of at most 0.01.	b != 0	(((a / b) - c) <= 0.01) && ((c - (a / b)) <= 0.01)	2	0	0	0	1	1	1	1	0
public static void multiplyNegative(int a, int b, int retval)	Multiply 2 strictly negative numbers a and b, resulting in retval	(a < 0) && (b < 0)	retval > 0 && retval == (a * b)	1	0	0	0	1	1	1	1	0
public static void isMultiple(int a, int b, boolean retval)	Check whether the strictly positive integer a is a multiple of a strictly positive integer b, storing the result in retval.	a > 0 && b > 0	retval == ((a % b) == 0)	1	0	0	0	1	1	1	1	0
public static void concatenateIntegers(int a, int b, int c)	Given two integers a and b between 10 and 99 inclusive, return c which is a concatenated with b.	a >= 10 && a <= 99 && b >= 10 && b <= 99	c == ((100 * a) + b)	2	0	0	0	1	1	1	1	0
public static void triangle(int b, int h, int a)	Given two strictly positive integers b and h, where b or h is even, return an integer a, which is the area of a triangle with base b and height h.	b > 0 && h > 0 && (((b * h) % 2) == 0)	(a * 2) == (b * h)	2	0	0	0	1	1	1	1	0
public static void rectangle(int b, int h, int a)	Given two strictly positive integers b and h, return an integer a, which is the area of a rectangle with base b and height h.	b > 0 && h > 0	a == (b * h)	1	0	0	0	1	1	1	1	0
public static void average(int a, int b, int c)	Given two odd integers a and b, calculate the average c.	(a % 2) == 1 && (b % 2) == 1	(c * 2) == (a + b)	1	0	0	0	1	1	0	1	0
public static void bitwiseComplement(int x, int y)	Given a non-negative integer x at most 255, return the bitwise complement y.	x >= 0 && x <= 255	(x + y) == 255	2	0	0	0	1	1	1	1	0